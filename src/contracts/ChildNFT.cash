pragma cashscript ^0.6.0;

contract Pokemon(bytes20 owner) {
    // Require pk to match stored owner and signature to match
    function reclaim(pubkey pk, sig s) {
        require(hash160(pk) == owner);
        require(checkSig(s, pk));
    }

    /**
    * Can only be called by the creater of the contract.
    */
    function createNFTChild(
        pubkey pk,
        sig s,
        // bytes20 recipient,
        // string actionType,
        // string symbol,
        // string name,
        // string documentURI,
        // string documentHash,
        // int minerFee,
    ) {  
        require(hash160(pk) == owner);
        require(checkSig(s, pk));

        // bytes announcement = new OutputNullData([
        //     0x534c5000,
        //     0x41,
        //     bytes(actionType),
        //     bytes(symbol),
        //     bytes(name),
        //     bytes(documentURI),
        //     bytes(documentHash),
        //     0x00,
        //     0x0000000000000001
        // ]);
        // Calculate leftover money after fee
        // Add change output if the remainder can be used
        // otherwise donate the remainder to the miner
        // int minSLPAmount = 546;
        // int changeAmount = int(bytes(tx.value)) - minerFee - minSLPAmount;
        //int changeAmount = int(bytes(tx.value)) - minerFee;

        // bytes34 changeSLP = new OutputP2PKH(bytes8(minSLPAmount), recipient);
        // bytes32 change = new OutputP2SH(bytes8(changeAmount), hash160(tx.bytecode));
        // require(tx.hashOutputs == hash256(announcement + change));
        // require(tx.hashOutputs == hash256(announcement + changeSLP + change));

    }
}