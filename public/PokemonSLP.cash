pragma cashscript ^0.6.3;

contract Pokemon(bytes20 owner) {
    // Require pk to match stored owner and signature to match
    function reclaim(pubkey pk, sig s) {
        require(checkSig(s, pk));
    }

    /**
    * Can only be called by the creater of the contract.
    */
    function createToken(
        pubkey pk,
        sig s,
        bytes20 recipientPkh,
        string actionType,
        string symbol,
        string name,
        string documentURI,
        string documentHash,
        int minerFee,
        string memoText
    ) {  
        require(hash160(pk) == owner);
        require(checkSig(s, pk));

        int dust = 546;

        bytes token = new OutputNullData([
            //bytes(lokadBin),
            0x534c5000,
            0x01,
            bytes(actionType),
            bytes(symbol),
            bytes(name),
            bytes(documentURI),
            bytes(documentHash),
            0x08,
            0x02,
            0x000000E8D4A51000
        ]);

        bytes memo = new OutputNullData([
            0x6d02,
            bytes(memoText)
        ]);

        int changeAmount = int(bytes(tx.value)) - minerFee - dust;
        if (changeAmount >= dust) {
            bytes34 recipient = new OutputP2PKH(bytes8(dust), recipientPkh);
            // Get the change back to the contract i.e Pay to Script Hash which is the current contract.
            bytes32 change = new OutputP2SH(bytes8(changeAmount), hash160(tx.bytecode));
            require(hash256(token + recipient + change + memo) == tx.hashOutputs);
            //require(hash256(token + recipient + change) == tx.hashOutputs);
        } else {
            require(hash256(token) == tx.hashOutputs);
        }

    }
}